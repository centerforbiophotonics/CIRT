class EventsController < ApplicationController
  before_action :set_event, only: [:update, :destroy]

  # GET /events
  def index
    @events = Event.all.map{|m| [m.id, m.with_associations] }.to_h
    respond_to do |format|
      format.html { render :action => "index" }
      format.json { render :json => @events}
    end
  end

  # POST /events
  def create
    @event = Event.new(event_params)

    if @event.save
      render :json => @event.with_associations
    else
      render json: @event.errors, status: :unprocessable_entity
    end
  end

  # PATCH/PUT /events/1
  def update
    if @event.update(event_params)
      render json: @event.with_associations
    else
      render json: @event.errors, status: :unprocessable_entity
    end
  end

  # DELETE /events/1
  def destroy
    render json: @event.destroy
  end

  # GET /events/search
  # This action is included as a placeholder for actual search logic.
  # The react component generated by default will send a search string in params[:search_text]
  def search
    if params[:search_text] != ""
      ActiveRecord::Base.connection.execute("SELECT set_limit(0.20);")
      render json: Event.fuzzy_search(:name => params[:search_text]).limit(10)
    else
      render json: Event.order("created_at DESC").limit(10)
    end
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_event
      @event = Event.find(params[:id])
    end

    # Only allow a trusted parameter "white list" through.
    def event_params
      params.require(:event).permit(:name, :description, :date, :event_category_id, {:tags => []})
    end
end
