class RolesController < ApplicationController
  before_action :set_role, only: [:update, :destroy]

  # GET /roles
  def index
    @roles = Role.all.map{|m| [m.id, m.with_associations] }.to_h
    respond_to do |format|
      format.html { render :action => "index" }
      format.json { render :json => @rolesx}
    end
  end

  # POST /roles
  def create
    @role = Role.new(role_params)

    if @role.save
      render :json => @role.with_associations
    else
      render json: @role.errors, status: :unprocessable_entity
    end
  end

  # PATCH/PUT /roles/1
  def update
    if @role.update(role_params)

      p params[:role][:children]

      if params[:role][:children].present?
        Role.find(params[:role][:children]).each do |c| 
          c.parent = @role
          c.save!
        end
      end

      render json: @role.with_associations
    else
      render json: @role.errors, status: :unprocessable_entity
    end
  end

  # DELETE /roles/1
  def destroy
    render json: @role.destroy
  end

  # GET /roles/search
  # This action is included as a placeholder for actual search logic.
  # The react component generated by default will send a search string in params[:search_text]
  def search
    render json: Role.first(10)
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_role
      @role = Role.find(params[:id])
    end

    # Only allow a trusted parameter "white list" through.
    def role_params
      params.require(:role).permit(:name)
    end
end
