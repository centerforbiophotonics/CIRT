class FundsController < ApplicationController
  before_action :set_fund, only: [:update, :destroy]
  before_action :check_authorization

  # GET /funds
  def index
    @funds = Fund.all.map{|m|
      [m.id, (params[:shallow] ? m : m.with_associations)]
    }.to_h

    respond_to do |format|
      format.html { render :action => "index" }
      format.json { render :json => @fundsx}
    end
  end

  # POST /funds
  def create
    @fund = Fund.new(fund_params)

    if @fund.save
      render :json => @fund.with_associations
    else
      render json: @fund.errors, status: :unprocessable_entity
    end
  end

  # PATCH/PUT /funds/1
  def update
    if @fund.update(fund_params)
      render json: @fund.with_associations
    else
      render json: @fund.errors, status: :unprocessable_entity
    end
  end

  # DELETE /funds/1
  def destroy
    render json: @fund.destroy
  end

  # GET /funds/search
  # This action is included as a placeholder for actual search logic.
  # The react component generated by default will send a search string in params[:search_text]
  def search
    if params[:search_text] != ""
      ActiveRecord::Base.connection.execute("SELECT set_limit(0.20);")
      render json: Fund.fuzzy_search(:name => params[:search_text]).limit(10)
    else
      render json: Fund.order("created_at DESC").limit(10)
    end
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_fund
      @fund = Fund.find(params[:id])
    end

    # Only allow a trusted parameter "white list" through.
    def fund_params
      params.require(:fund).permit(:person_id, :amount, :name, :description, :date, :external, :source)
    end

    def check_authorization
      authorize Fund
    end
end
